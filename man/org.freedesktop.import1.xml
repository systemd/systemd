<?xml version='1.0'?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" >
<!-- SPDX-License-Identifier: LGPL-2.1-or-later -->

<refentry id="org.freedesktop.import1" conditional='ENABLE_IMPORTD'
    xmlns:xi="http://www.w3.org/2001/XInclude">
  <refentryinfo>
    <title>org.freedesktop.import1</title>
    <productname>systemd</productname>
  </refentryinfo>

  <refmeta>
    <refentrytitle>org.freedesktop.import1</refentrytitle>
    <manvolnum>5</manvolnum>
  </refmeta>

  <refnamediv>
    <refname>org.freedesktop.import1</refname>
    <refpurpose>The D-Bus interface of systemd-importd</refpurpose>
  </refnamediv>

  <refsect1>
    <title>Introduction</title>

    <para>
    <citerefentry><refentrytitle>systemd-importd.service</refentrytitle><manvolnum>8</manvolnum></citerefentry>
    is a system service which may be used to import, export and download disk images. These images can be
    used by tools such as
    <citerefentry><refentrytitle>systemd-nspawn</refentrytitle><manvolnum>1</manvolnum></citerefentry> to run
    local containers. The service is used as the backend for <command>importctl pull-raw</command>,
    <command>importctl pull-tar</command> and related commands. This page describes the D-Bus interface.
    </para>

    <para>Note that
    <citerefentry><refentrytitle>systemd-importd.service</refentrytitle><manvolnum>8</manvolnum></citerefentry>
    is mostly a small companion service for
    <citerefentry><refentrytitle>systemd-machined.service</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
    Many operations to manipulate local container and VM images are hence available via the <command>systemd-machined</command> D-Bus API, c.f.
    <citerefentry><refentrytitle>org.freedesktop.machine1</refentrytitle><manvolnum>5</manvolnum></citerefentry>.
    </para>
  </refsect1>

  <refsect1>
    <title>The Manager Object</title>

    <para>The service exposes the following interfaces on the Manager object on the bus:</para>

    <programlisting executable="systemd-importd" node="/org/freedesktop/import1" interface="org.freedesktop.import1.Manager">
node /org/freedesktop/import1 {
  interface org.freedesktop.import1.Manager {
    methods:
      ImportTar(in  h fd,
                in  s local_name,
                in  b force,
                in  b read_only,
                out u transfer_id,
                out o transfer_path);
      ImportTarEx(in  h fd,
                  in  s local_name,
                  in  s class,
                  in  t flags,
                  out u transfer_id,
                  out o transfer_path);
      ImportRaw(in  h fd,
                in  s local_name,
                in  b force,
                in  b read_only,
                out u transfer_id,
                out o transfer_path);
      ImportRawEx(in  h fd,
                  in  s local_name,
                  in  s class,
                  in  t flags,
                  out u transfer_id,
                  out o transfer_path);
      ImportFileSystem(in  h fd,
                       in  s local_name,
                       in  b force,
                       in  b read_only,
                       out u transfer_id,
                       out o transfer_path);
      ImportFileSystemEx(in  h fd,
                         in  s local_name,
                         in  s class,
                         in  t flags,
                         out u transfer_id,
                         out o transfer_path);
      ExportTar(in  s local_name,
                in  h fd,
                in  s format,
                out u transfer_id,
                out o transfer_path);
      ExportTarEx(in  s local_name,
                  in  s class,
                  in  h fd,
                  in  s format,
                  in  t flags,
                  out u transfer_id,
                  out o transfer_path);
      ExportRaw(in  s local_name,
                in  h fd,
                in  s format,
                out u transfer_id,
                out o transfer_path);
      ExportRawEx(in  s local_name,
                  in  s class,
                  in  h fd,
                  in  s format,
                  in  t flags,
                  out u transfer_id,
                  out o transfer_path);
      PullTar(in  s url,
              in  s local_name,
              in  s verify_mode,
              in  b force,
              out u transfer_id,
              out o transfer_path);
      PullTarEx(in  s url,
                in  s local_name,
                in  s class,
                in  s verify_mode,
                in  t flags,
                out u transfer_id,
                out o transfer_path);
      PullRaw(in  s url,
              in  s local_name,
              in  s verify_mode,
              in  b force,
              out u transfer_id,
              out o transfer_path);
      PullRawEx(in  s url,
                in  s local_name,
                in  s class,
                in  s verify_mode,
                in  t flags,
                out u transfer_id,
                out o transfer_path);
      ListTransfers(out a(usssdo) transfers);
      ListTransfersEx(in  s class,
                      in  t flags,
                      out a(ussssdo) transfers);
      CancelTransfer(in  u transfer_id);
      ListImages(in  s class,
                 in  t flags,
                 out a(ssssbtttttt) images);
    signals:
      TransferNew(u transfer_id,
                  o transfer_path);
      TransferRemoved(u transfer_id,
                      o transfer_path,
                      s result);
  };
  interface org.freedesktop.DBus.Peer { ... };
  interface org.freedesktop.DBus.Introspectable { ... };
  interface org.freedesktop.DBus.Properties { ... };
};
</programlisting>

    <!--Autogenerated cross-references for systemd.directives, do not edit-->

    <variablelist class="dbus-interface" generated="True" extra-ref="org.freedesktop.import1.Manager"/>

    <variablelist class="dbus-interface" generated="True" extra-ref="org.freedesktop.import1.Manager"/>

    <variablelist class="dbus-method" generated="True" extra-ref="ImportTar()"/>

    <variablelist class="dbus-method" generated="True" extra-ref="ImportTarEx()"/>

    <variablelist class="dbus-method" generated="True" extra-ref="ImportRaw()"/>

    <variablelist class="dbus-method" generated="True" extra-ref="ImportRawEx()"/>

    <variablelist class="dbus-method" generated="True" extra-ref="ImportFileSystem()"/>

    <variablelist class="dbus-method" generated="True" extra-ref="ImportFileSystemEx()"/>

    <variablelist class="dbus-method" generated="True" extra-ref="ExportTar()"/>

    <variablelist class="dbus-method" generated="True" extra-ref="ExportTarEx()"/>

    <variablelist class="dbus-method" generated="True" extra-ref="ExportRaw()"/>

    <variablelist class="dbus-method" generated="True" extra-ref="ExportRawEx()"/>

    <variablelist class="dbus-method" generated="True" extra-ref="PullTar()"/>

    <variablelist class="dbus-method" generated="True" extra-ref="PullTarEx()"/>

    <variablelist class="dbus-method" generated="True" extra-ref="PullRaw()"/>

    <variablelist class="dbus-method" generated="True" extra-ref="PullRawEx()"/>

    <variablelist class="dbus-method" generated="True" extra-ref="ListTransfers()"/>

    <variablelist class="dbus-method" generated="True" extra-ref="ListTransfersEx()"/>

    <variablelist class="dbus-method" generated="True" extra-ref="CancelTransfer()"/>

    <variablelist class="dbus-method" generated="True" extra-ref="ListImages()"/>

    <variablelist class="dbus-signal" generated="True" extra-ref="TransferNew()"/>

    <variablelist class="dbus-signal" generated="True" extra-ref="TransferRemoved()"/>

    <!--End of Autogenerated section-->

    <refsect2>
      <title>Methods</title>

      <para><function>ImportTar()</function>/<function>ImportTarEx()</function> and
      <function>ImportRaw()</function>/<function>ImportRawEx()</function> import a disk image and place it
      into the image directory. The first argument should be a file descriptor (opened for reading) referring
      to the tar or raw file to import. It should reference a file on disk, a pipe or a socket. When
      <function>ImportTar()</function>/<function>ImportTarEx()</function> is used the file descriptor should
      refer to a tar file, optionally compressed with <citerefentry project="die-net"><refentrytitle>gzip</refentrytitle><manvolnum>1</manvolnum></citerefentry>,
      <citerefentry project="die-net"><refentrytitle>zstd</refentrytitle><manvolnum>1</manvolnum></citerefentry>,
      <citerefentry project="die-net"><refentrytitle>bzip2</refentrytitle><manvolnum>1</manvolnum></citerefentry>, or
      <citerefentry project="die-net"><refentrytitle>xz</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
      <command>systemd-importd</command> will detect the used compression scheme (if any) automatically. When
      <function>ImportRaw()</function>/<function>ImportRawEx()</function> is used the file descriptor should
      refer to a raw or qcow2 disk image containing an MBR or GPT disk label, also optionally compressed with
      gzip, zstd, bzip2 or xz. In either case, if the file is specified as a file descriptor on disk, progress
      information is generated for the import operation (as in that case we know the total size on disk). If
      a socket or pipe is specified, progress information is not available. The file descriptor argument is
      followed by a local name for the image. This should be a name suitable as a hostname and will be used
      to name the imported image below <filename>/var/lib/machines/</filename>. A tar import is placed as a
      directory tree or a <citerefentry project="url"><refentrytitle url="https://btrfs.readthedocs.io/en/latest/btrfs.html">btrfs</refentrytitle><manvolnum>8</manvolnum></citerefentry>
      subvolume below the image directory under the specified name with no suffix appended. A raw import is
      placed as a file in the image directory with the <filename>.raw</filename> suffix appended. In case of
      <function>ImportTar()</function>/<function>ImportRaw()</function>, if the <option>force</option>
      argument is true, any pre-existing image with the same name is removed before starting the
      operation. Otherwise, the operation fails if an image with the same name already exists. The
      <option>read_only</option> argument controls whether to create a writable or read-only image. In case
      of <function>ImportTarEx()</function>/<function>ImportRawEx()</function> these boolean flags are
      provided via a 64bit flags parameter instead, with bit 0 mapping to the <option>force</option>
      parameter, and bit 1 mapping to <option>read_only</option>. The <option>class</option> parameter
      specifies the image class, and takes one of <literal>machine</literal>, <literal>portable</literal>,
      <literal>sysext</literal>, <literal>confext</literal>. All four methods return immediately after
      starting the import, with the import transfer ongoing. They return a pair of transfer identifier and
      object path, which may be used to retrieve progress information about the transfer or to cancel it. The
      transfer identifier is a simple numeric identifier, the object path references an
      <interfacename>org.freedesktop.import1.Transfer</interfacename> object, see below. Listen for a
      <function>TransferRemoved()</function> signal for the transfer ID in order to detect when a transfer is
      complete. The returned transfer object is useful to determine the current progress or log output of the
      ongoing import operation.</para>

      <para><function>ExportTar()</function>/<function>ExportTarEx()</function> and
      <function>ExportRaw()</function>/<function>ExportRaw()</function> implement the reverse operation, and
      may be used to export a system image in order to place it in a tar or raw image. They take the machine
      name to export as their first parameter, followed by a file descriptor (opened for writing) where the
      tar or raw file will be written. It may either reference a file on disk or a pipe/socket. The third
      argument specifies in which compression format to write the image. It takes one of
      <literal>uncompressed</literal>, <literal>xz</literal>, <literal>bzip2</literal>,
      <literal>gzip</literal> or <literal>zstd</literal>, depending on which compression scheme is required.
      The image written to the specified file descriptor will be a tar file in case of
      <function>ExportTar()</function>/<function>ExportTarEx()</function> or a raw disk image in case of
      <function>ExportRaw()</function>/<function>ExportRawEx()</function>. Note that currently raw disk
      images may not be exported as tar files, and vice versa. This restriction might be lifted
      eventually. The method returns a transfer identifier and object path for cancelling or tracking the
      export operation, similarly to <function>ImportTar()</function>/<function>ImportTarEx()</function> or
      <function>ImportRaw()</function>/<function>ImportRawEx()</function> as described
      above. <function>ExportTarEx()</function>/<function>ExportRawEx()</function> expect the image class as
      additional parameter, as well as a 64bit flags parameter that currently must be specified as
      zero.</para>

      <para><function>PullTar()</function>/<function>PullTarEx()</function> and
      <function>PullRaw()</function>/<function>PullRawEx()</function> may be used to download, verify and
      import a system image from a URL. They take a URL argument which should point to a tar or raw file on
      the <literal>http://</literal> or <literal>https://</literal> protocols, possibly compressed with xz,
      bzip2, gzip or zstd. The second argument is a local name for the image. It should be suitable as a
      hostname, similarly to the matching argument of the
      <function>ImportTar()</function>/<function>ImportTarEx()</function> and
      <function>ImportRaw()</function>/<function>ImportRawEx()</function> methods above. The third argument
      indicates the verification mode for the image. It may be one of <literal>no</literal>,
      <literal>checksum</literal>, <literal>signature</literal>. <literal>no</literal> turns off any kind of
      verification of the image; <literal>checksum</literal> looks for a <filename>SHA256SUM</filename> file
      next to the downloaded image and verifies any SHA256 hash value in that file against the image;
      <literal>signature</literal> does the same but also tries to authenticate the
      <filename>SHA256SUM</filename> file via <citerefentry project="man-pages"><refentrytitle>gpg</refentrytitle><manvolnum>8</manvolnum></citerefentry> first. In
      case of <function>PullTar()</function>/<function>PullRaw()</function> the last argument indicates
      whether to replace a possibly pre-existing image with the same local name (if <literal>true</literal>),
      or whether to fail (if <literal>false</literal>). In case of
      <function>PullTarEx()</function>/<function>PullRawEx()</function> the last argument is a 64bit flags
      parameter, where bit 0 controls the <literal>force</literal> flag, bit 1 is a
      <literal>read_only</literal> flag that controls whether the created image shall be marked read-only,
      and bit 2 is a <literal>keep_download</literal> flag that indicates whether a pristine, read-only copy
      of the downloaded image shell be kept, in addition for the local copy of the image. The
      <function>…_Ex()</function> variants also expect an image class string (as above). Like the import and
      export calls above, these calls return a pair of transfer identifier and object path for the ongoing
      download.</para>

      <para><function>ImportFileSystem()</function>/<function>ImportFileSystemEx()</function> are similar to
      <function>ImportTar()</function>/<function>ImportTarEx()</function> but import a directory tree. The
      first argument must refer to a directory file descriptor for the source hierarchy to import.</para>

      <para><function>ListTransfers()</function>/<function>ListTransfersEx()</function> return a list of
      ongoing import, export or download operations as created with the six calls described above. They
      return an array of structures which consist of the numeric transfer identifier, a string indicating the
      operation (one of <literal>import-tar</literal>, <literal>import-raw</literal>,
      <literal>export-tar</literal>, <literal>export-raw</literal>, <literal>pull-tar</literal> or
      <literal>pull-raw</literal>), a string describing the remote file (in case of download operations this
      is the source URL, in case of import/export operations this is a short string describing the file
      descriptor passed in), a string with the local machine image name, the image class (only in case of
      <function>ListTransfersEx()</function>; one of <literal>machine</literal>, <literal>portable</literal>,
      <literal>sysext</literal>, <literal>confext</literal>), a progress value between 0.0 (for 0%) and 1.0
      (for 100%), as well as the transfer object path.</para>

      <para><function>CancelTransfer()</function> may be used to cancel an ongoing import, export or download
      operation. Simply specify the transfer identifier to cancel the ongoing operation.</para>

      <para><function>ListImages()</function> returns a list of currently installed images. It takes a image
      class string and a flags parameter. The image class is either the empty string or specifies one of the
      four image classes, by which it will then filter. The flags parameter must be zero at this time. It
      returns an array of items, each describing one image. The item fields are in order: the image class,
      the local image name, the image type, the image path, the read-only flag, the creation and modification
      times (in microseconds since the UNIX epoch), as well as the current disk usage in bytes (both overall,
      and exclusive), as well as any size limit in bytes set on the image (both overall and
      exclusive).</para>
    </refsect2>

    <refsect2>
      <title>Signals</title>

      <para>The <function>TransferNew()</function> signal is generated each time a new transfer is started with
      the import, export or download calls described above. It carries the transfer ID and object path that
      have just been created.</para>

      <para>The <function>TransferRemoved()</function> signal is sent each time a transfer finishes,
      is canceled or fails. It also carries the transfer ID and object path, followed by a string indicating
      the result of the operation, which is one of <literal>done</literal> (on success),
      <literal>canceled</literal> or <literal>failed</literal>.</para>
    </refsect2>
  </refsect1>

  <refsect1>
    <title>The Transfer Object</title>

    <programlisting executable="systemd-importd" node="/org/freedesktop/import1/transfer/_1" interface="org.freedesktop.import1.Transfer">
node /org/freedesktop/import1/transfer/_1 {
  interface org.freedesktop.import1.Transfer {
    methods:
      Cancel();
    signals:
      LogMessage(u priority,
                 s line);
      ProgressUpdate(d progress);
    properties:
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly u Id = ...;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly s Local = '...';
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly s Remote = '...';
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly s Type = '...';
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly s Verify = '...';
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly d Progress = ...;
  };
  interface org.freedesktop.DBus.Peer { ... };
  interface org.freedesktop.DBus.Introspectable { ... };
  interface org.freedesktop.DBus.Properties { ... };
};
</programlisting>

    <!--Autogenerated cross-references for systemd.directives, do not edit-->

    <variablelist class="dbus-interface" generated="True" extra-ref="org.freedesktop.import1.Transfer"/>

    <variablelist class="dbus-interface" generated="True" extra-ref="org.freedesktop.import1.Transfer"/>

    <variablelist class="dbus-method" generated="True" extra-ref="Cancel()"/>

    <variablelist class="dbus-signal" generated="True" extra-ref="LogMessage()"/>

    <variablelist class="dbus-signal" generated="True" extra-ref="ProgressUpdate()"/>

    <variablelist class="dbus-property" generated="True" extra-ref="Id"/>

    <variablelist class="dbus-property" generated="True" extra-ref="Local"/>

    <variablelist class="dbus-property" generated="True" extra-ref="Remote"/>

    <variablelist class="dbus-property" generated="True" extra-ref="Type"/>

    <variablelist class="dbus-property" generated="True" extra-ref="Verify"/>

    <variablelist class="dbus-property" generated="True" extra-ref="Progress"/>

    <!--End of Autogenerated section-->

    <refsect2>
      <title>Methods</title>

      <para>The <function>Cancel()</function> method may be used to cancel the transfer. It takes no
      parameters. This method is pretty much equivalent to the <function>CancelTransfer()</function> method
      on the <structname>Manager</structname> interface (see above), but is exposed on the
      <structname>Transfer</structname> object itself instead of taking a transfer ID.</para>
    </refsect2>

    <refsect2>
      <title>Properties</title>

      <para>The <varname>Id</varname> property exposes the numeric transfer ID of the transfer object.</para>

      <para>The <varname>Local</varname>, <varname>Remote</varname> and <varname>Type</varname> properties
      expose the local container name of this transfer, the remote source (in case of download: the URL, in
      case of import/export: a string describing the file descriptor passed in), and the type of operation
      (see the Manager's <function>ListTransfer()</function> method above for an explanation of the possible
      values).</para>

      <para>The <varname>Verify</varname> property exposes the selected verification setting and is only
      defined for download operations (see above).</para>

      <para>The <varname>Progress</varname> property exposes the current progress of the transfer as a value
      between 0.0 and 1.0. To show a progress bar on screen we recommend to query this value in regular
      intervals, for example every 500 ms or so.</para>
    </refsect2>

    <refsect2>
      <title>Signals</title>

      <para>The <function>LogMessage()</function> signal is emitted for log messages generated by a transfer. It
      carries a pair of syslog log level integer and log string.</para>

      <para>The <function>ProgressUpdate()</function> signal is emitted in regular intervals when new
      download progress information is available for a transfer. It carries a double precision floating
      pointer number between 0.0 and 1.0 indicating the transfer progress.</para>
    </refsect2>
  </refsect1>

  <refsect1>
    <title>Examples</title>

    <example>
      <title>Introspect <interfacename>org.freedesktop.import1.Manager</interfacename> on the bus</title>

      <programlisting>$ gdbus introspect --system \
  --dest org.freedesktop.import1 \
  --object-path /org/freedesktop/import1
</programlisting>
    </example>

    <example>
      <title>Introspect <interfacename>org.freedesktop.import1.Transfer</interfacename> on the bus</title>

      <programlisting>$ gdbus introspect --system \
  --dest org.freedesktop.import1 \
  --object-path /org/freedesktop/import1/transfer/_1
</programlisting>
    </example>
  </refsect1>

  <xi:include href="org.freedesktop.locale1.xml" xpointer="versioning"/>

  <refsect1>
    <title>History</title>
    <refsect2>
      <title>The Manager Object</title>
      <para><function>ImportTarEx()</function>, <function>ImportRawEx()</function>,
      <function>ImportFileSystemEx()</function>, <function>ExportTarEx()</function>,
      <function>ExportRawEx()</function>, <function>PullTarEx()</function>, <function>PullRawEx()</function>,
      <function>ListTransfersEx()</function>, <function>ListImages()</function> were added in version
      256.</para>
    </refsect2>
    <refsect2>
      <title>Transfer Objects</title>
      <para><function>ProgressUpdate()</function> was added in version 256.</para>
    </refsect2>
  </refsect1>

  <refsect1>
    <title>See Also</title>
    <para><simplelist type="inline">
      <member><citerefentry><refentrytitle>systemd</refentrytitle><manvolnum>1</manvolnum></citerefentry></member>
      <member><citerefentry><refentrytitle>systemd-importd.service</refentrytitle><manvolnum>8</manvolnum></citerefentry></member>
      <member><citerefentry><refentrytitle>importctl</refentrytitle><manvolnum>1</manvolnum></citerefentry></member>
    </simplelist></para>
  </refsect1>

</refentry>
