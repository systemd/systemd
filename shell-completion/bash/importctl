# shellcheck shell=bash
# importctl(1) completion                      -*- shell-script -*-
# SPDX-License-Identifier: LGPL-2.1-or-later
#
# This file is part of systemd.
#
# systemd is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# systemd is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with systemd; If not, see <https://www.gnu.org/licenses/>.

__contains_word() {
    local w word=$1; shift
    for w in "$@"; do
        [[ $w = "$word" ]] && return
    done
}

__get_machines() {
    local a b
    { machinectl list-images --full --no-legend --no-pager 2>/dev/null; machinectl list --full --max-addresses=0 --no-legend --no-pager 2>/dev/null; echo ".host"; } | \
	{ while read a b; do echo " $a"; done; } | \
        sort -u
}

_importctl() {
    local cur=${COMP_WORDS[COMP_CWORD]} prev=${COMP_WORDS[COMP_CWORD-1]} words cword
    local i verb comps

    local -A OPTS=(
        [STANDALONE]='--force -h --help -j -N --no-ask-password --no-legend --no-pager -q --quiet --read-only
                      --version -m -P -S -C'
        [ARG]='--host -H -M --machine --json --verify --format --class --keep-download'
    )

    local -A VERBS=(
        [STANDALONE]='pull-tar pull-raw list-transfers cancel-transfer list-images'
        [FILE]='import-tar import-raw'
        [FILE2]='export-tar export-raw'
        [DIR]='import-fs'
    )

    _init_completion || return

    for ((i=0; i <= COMP_CWORD; i++)); do
        if __contains_word "${COMP_WORDS[i]}" ${VERBS[*]} &&
                ! __contains_word "${COMP_WORDS[i-1]}" ${OPTS[ARG]}; then
            verb=${COMP_WORDS[i]}
            break
        fi
    done

    if __contains_word "$prev" ${OPTS[ARG]}; then
        case $prev in
            --host|-H)
                comps=$(compgen -A hostname)
                ;;
            --machine|-M)
                comps=$( __get_machines )
                ;;
            --json)
                comps='pretty short off'
                ;;
            --verify)
                comps='no checksum signature'
                ;;
            --format)
                comps='uncompressed xz gzip bzip2 zstd'
                ;;
            --class)
                comps='machine portable sysext confext'
                ;;
            --keep-download)
                comps='yes no'
                ;;
        esac
        COMPREPLY=( $(compgen -W '$comps' -- "$cur") )
        return 0
    fi

    if [[ "$cur" = -* ]]; then
        COMPREPLY=( $(compgen -W '${OPTS[*]}' -- "$cur") )
        return 0
    fi

    if [[ -z ${verb-} ]]; then
        comps=${VERBS[*]}
    elif __contains_word "$verb" ${VERBS[STANDALONE]}; then
        comps=''
    elif __contains_word "$verb" ${VERBS[DIR]}; then
        if (( COMP_CWORD == i + 1 )); then # first argument after verb
            comps=$(compgen -d -- "$cur")
            compopt -o dirnames
        else
            comps=''
        fi
    elif __contains_word "$verb" ${VERBS[FILE]}; then
        if (( COMP_CWORD == i + 1 )); then # first argument after verb
            comps=$(compgen -f -- "$cur")
            compopt -o filenames
        else
            comps=''
        fi
    elif __contains_word "$verb" ${VERBS[FILE2]}; then
        if (( COMP_CWORD == i + 2 )); then # second argument after verb
            comps=$(compgen -f -- "$cur")
            compopt -o filenames
        else
            comps=''
        fi
    fi

    COMPREPLY=( $(compgen -W '$comps' -- "$cur") )
    return 0
}

complete -F _importctl importctl
