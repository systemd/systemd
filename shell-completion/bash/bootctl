# shellcheck shell=bash
# bootctl(1) completion                               -*- shell-script -*-
# SPDX-License-Identifier: LGPL-2.1-or-later
#
# This file is part of systemd.
#
# systemd is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# systemd is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with systemd; If not, see <https://www.gnu.org/licenses/>.

__contains_word () {
    local w word=$1; shift
    for w in "$@"; do
        [[ $w = "$word" ]] && return
    done
}

__get_entry_ids() {
    bootctl --no-pager list 2>/dev/null | { while read -r a b; do [[ $a == 'id:' ]] && echo " $b"; done; }
}

_bootctl() {
    local i verb comps
    local cur=${COMP_WORDS[COMP_CWORD]} prev=${COMP_WORDS[COMP_CWORD-1]}
    local -A OPTS=(
        [STANDALONE]='-h --help --version
                      -p --print-esp-path -x --print-boot-path --print-loader-path
                      --print-stub-path -R --print-root-device -RR
                      --no-pager --graceful -q --quiet --all-architectures
                      --dry-run'
        [ARG]='--esp-path --boot-path --root --image --image-policy --install-source
               --variables --random-seed --make-entry-directory --entry-token --json
               --efi-boot-option-description --secure-boot-auto-enroll --private-key
               --private-key-source --certificate --certificate-source'
    )

    if __contains_word "$prev" ${OPTS[ARG]}; then
        case $prev in
            --esp-path|--boot-path|--private-key|--certificate)
                if [[ -z $cur ]]; then
                    comps=$(compgen -A directory -- "/" )
                else
                    comps=$(compgen -A directory -- "$cur" )
                fi
                compopt -o filenames
                ;;
            --make-entry-directory)
                comps="yes no auto"
                ;;
            --entry-token)
                comps="machine-id os-id os-image-id auto literal:"
                ;;
            --image|--root)
                compopt -o nospace
                comps=$( compgen -A file -- "$cur" )
                ;;
            --install-source)
                comps="image host auto"
                ;;
            --random-seed|--variables|--secure-boot-auto-enroll)
                comps="yes no"
                ;;
            --json)
                comps=$( bootctl --json=help 2>/dev/null )
                ;;
        esac
        COMPREPLY=( $(compgen -W '$comps' -- "$cur") )
        return 0
    fi

    if [[ "$cur" = -* ]]; then
        COMPREPLY=( $(compgen -W '${OPTS[*]}' -- "$cur") )
        return 0
    fi

    local -A VERBS=(
        [STANDALONE]='help status install update remove is-installed random-seed list set-timeout set-timeout-oneshot cleanup'
        [BOOTENTRY]='set-default set-oneshot set-sysfail unlink'
        [BOOLEAN]='reboot-to-firmware'
        [FILE]='kernel-identify kernel-inspect'
    )

    for ((i=0; i < COMP_CWORD; i++)); do
        if __contains_word "${COMP_WORDS[i]}" ${VERBS[*]}; then
            verb=${COMP_WORDS[i]}
            break
        fi
    done

    if [[ -z ${verb-} ]]; then
        comps=${VERBS[*]}
    elif __contains_word "$verb" ${VERBS[STANDALONE]}; then
        comps=''
    elif __contains_word "$verb" ${VERBS[BOOTENTRY]}; then
        name=
        for ((i++; i < COMP_CWORD; i++)); do
            if ! __contains_word "${COMP_WORDS[i]}" ${OPTS[*]} ${VERBS[*]} &&
                    ! __contains_word "${COMP_WORDS[i-1]}" ${OPTS[ARG]}; then
                name=${COMP_WORDS[i]}
                break
            fi
        done

        if [[ -z $name ]]; then
            comps=$( __get_entry_ids )
        else
            comps=''
        fi
    elif __contains_word "$verb" ${VERBS[BOOLEAN]}; then
        comps="yes no"
    elif __contains_word "$verb" ${VERBS[FILE]}; then
        comps=$( compgen -A file -- "$cur" )
        compopt -o filenames
    fi

    COMPREPLY=( $(compgen -W '$comps' -- "$cur") )
    return 0
}

complete -F _bootctl bootctl
